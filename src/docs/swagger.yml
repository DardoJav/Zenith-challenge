openapi: 3.0.0
info:
  title: Order Management API
  description: API for order management, processing and order logs.
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
    description: Local Server
paths:
  /orders:
    post:
      summary: Create a new order
      description: Saves an order in MongoDB and sends it to RabbitMQ for processing.
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
      responses:
        "201":
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        "400":
          description: Invalid data
  /orders/{orderId}:
    get:
      summary: Get an order
      description: Retrieves an order by its ID, first from Redis and if it is not there, from MongoDB.
      operationId: getOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetails'
        "404":
          description: Order not found
  /logs/orders/{orderId}:
    get:
      summary: Get logs of an order
      description: Retrieves the processing logs of an order from Elasticsearch.
      operationId: getOrderLogs
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Order logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderLog'
        "500":
          description: Server error
components:
  schemas:
    OrderInput:
      type: object
      required:
        - userId
        - products
      properties:
        userId:
          type: string
        products:
          type: array
          items:
            type: object
            required:
              - productId
              - quantity
            properties:
              productId:
                type: string
              quantity:
                type: integer
    OrderResponse:
      type: object
      properties:
        orderId:
          type: string
        status:
          type: string
          enum: [PENDING, PROCESSING, COMPLETED, FAILED]
    OrderDetails:
      allOf:
        - $ref: '#/components/schemas/OrderInput'
        - type: object
          properties:
            orderId:
              type: string
            status:
              type: string
              enum: [PENDING, PROCESSING, COMPLETED, FAILED]
    OrderLog:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        message:
          type: string
